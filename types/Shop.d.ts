/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ShopInterface extends ethers.utils.Interface {
  functions: {
    "buyPack(uint16)": FunctionFragment;
    "buyPackAmount(uint16,uint16)": FunctionFragment;
    "claimToken()": FunctionFragment;
    "getONERate()": FunctionFragment;
    "getPackPrice(uint16)": FunctionFragment;
    "owner()": FunctionFragment;
    "packAvaliable(uint16)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOpenSale(bool)": FunctionFragment;
    "setPackAvaliable(uint16,uint256)": FunctionFragment;
    "setPackPrice(uint16,uint256)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyPack",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyPackAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getONERate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPackPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "packAvaliable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenSale",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPackAvaliable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPackPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "buyPack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyPackAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getONERate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPackPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packAvaliable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPackAvaliable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPackPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BuyPack(uint16,uint256,address)": EventFragment;
    "BuyPackAmount(address,uint16,uint256)": EventFragment;
    "ClaimToken(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetPackAvaliable(uint16,uint256)": EventFragment;
    "SetPackPrice(uint16,uint256)": EventFragment;
    "SetSaleOpen(bool)": EventFragment;
    "UpdatePriceFeed(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyPack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyPackAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPackAvaliable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPackPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSaleOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePriceFeed"): EventFragment;
}

export type BuyPackEvent = TypedEvent<
  [number, BigNumber, string] & {
    packId: number;
    price: BigNumber;
    buyer: string;
  }
>;

export type BuyPackAmountEvent = TypedEvent<
  [string, number, BigNumber] & {
    user: string;
    packId: number;
    amount: BigNumber;
  }
>;

export type ClaimTokenEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetPackAvaliableEvent = TypedEvent<
  [number, BigNumber] & { packId: number; amount: BigNumber }
>;

export type SetPackPriceEvent = TypedEvent<
  [number, BigNumber] & { packId: number; price: BigNumber }
>;

export type SetSaleOpenEvent = TypedEvent<[boolean] & { isOpen: boolean }>;

export type UpdatePriceFeedEvent = TypedEvent<
  [string, string] & { user: string; feed: string }
>;

export class Shop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ShopInterface;

  functions: {
    buyPack(
      _packId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyPackAmount(
      _packId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getONERate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPackPrice(
      _packId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    packAvaliable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenSale(
      _openSale: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPackAvaliable(
      _packId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPackPrice(
      _packId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyPack(
    _packId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyPackAmount(
    _packId: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getONERate(overrides?: CallOverrides): Promise<BigNumber>;

  getPackPrice(
    _packId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  packAvaliable(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenSale(
    _openSale: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPackAvaliable(
    _packId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPackPrice(
    _packId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyPack(_packId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    buyPackAmount(
      _packId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimToken(overrides?: CallOverrides): Promise<void>;

    getONERate(overrides?: CallOverrides): Promise<BigNumber>;

    getPackPrice(
      _packId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    packAvaliable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOpenSale(_openSale: boolean, overrides?: CallOverrides): Promise<void>;

    setPackAvaliable(
      _packId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPackPrice(
      _packId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(_address: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyPack(uint16,uint256,address)"(
      packId?: null,
      price?: null,
      buyer?: null
    ): TypedEventFilter<
      [number, BigNumber, string],
      { packId: number; price: BigNumber; buyer: string }
    >;

    BuyPack(
      packId?: null,
      price?: null,
      buyer?: null
    ): TypedEventFilter<
      [number, BigNumber, string],
      { packId: number; price: BigNumber; buyer: string }
    >;

    "BuyPackAmount(address,uint16,uint256)"(
      user?: null,
      packId?: null,
      amount?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { user: string; packId: number; amount: BigNumber }
    >;

    BuyPackAmount(
      user?: null,
      packId?: null,
      amount?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { user: string; packId: number; amount: BigNumber }
    >;

    "ClaimToken(address,uint256)"(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    ClaimToken(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetPackAvaliable(uint16,uint256)"(
      packId?: null,
      amount?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { packId: number; amount: BigNumber }
    >;

    SetPackAvaliable(
      packId?: null,
      amount?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { packId: number; amount: BigNumber }
    >;

    "SetPackPrice(uint16,uint256)"(
      packId?: null,
      price?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { packId: number; price: BigNumber }
    >;

    SetPackPrice(
      packId?: null,
      price?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { packId: number; price: BigNumber }
    >;

    "SetSaleOpen(bool)"(
      isOpen?: null
    ): TypedEventFilter<[boolean], { isOpen: boolean }>;

    SetSaleOpen(
      isOpen?: null
    ): TypedEventFilter<[boolean], { isOpen: boolean }>;

    "UpdatePriceFeed(address,address)"(
      user?: null,
      feed?: null
    ): TypedEventFilter<[string, string], { user: string; feed: string }>;

    UpdatePriceFeed(
      user?: null,
      feed?: null
    ): TypedEventFilter<[string, string], { user: string; feed: string }>;
  };

  estimateGas: {
    buyPack(
      _packId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyPackAmount(
      _packId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getONERate(overrides?: CallOverrides): Promise<BigNumber>;

    getPackPrice(
      _packId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    packAvaliable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenSale(
      _openSale: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPackAvaliable(
      _packId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPackPrice(
      _packId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyPack(
      _packId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyPackAmount(
      _packId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getONERate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPackPrice(
      _packId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    packAvaliable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenSale(
      _openSale: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPackAvaliable(
      _packId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPackPrice(
      _packId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
