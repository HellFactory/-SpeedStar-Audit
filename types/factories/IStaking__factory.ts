/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IStaking, IStakingInterface } from "../IStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "depositHorse",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableTokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_horseTokenId",
        type: "uint256",
      },
    ],
    name: "depositHorseInStable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "depositStable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "withdrawHorse",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableTokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_horseTokenId",
        type: "uint256",
      },
    ],
    name: "withdrawHorseInStable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableTokenId",
        type: "uint256",
      },
    ],
    name: "withdrawStable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IStaking__factory {
  static readonly abi = _abi;
  static createInterface(): IStakingInterface {
    return new utils.Interface(_abi) as IStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IStaking {
    return new Contract(address, _abi, signerOrProvider) as IStaking;
  }
}
