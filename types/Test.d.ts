/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestInterface extends ethers.utils.Interface {
  functions: {
    "claimHorse(uint256)": FunctionFragment;
    "claimSpeed()": FunctionFragment;
    "claimStable(uint256)": FunctionFragment;
    "depositHorseInStable(uint256,uint256)": FunctionFragment;
    "depositStable(uint256)": FunctionFragment;
    "facility()": FunctionFragment;
    "horse()": FunctionFragment;
    "horseId()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setStakeContract(address)": FunctionFragment;
    "setTargetAmount(uint256)": FunctionFragment;
    "speed()": FunctionFragment;
    "stableId()": FunctionFragment;
    "staking()": FunctionFragment;
    "targetAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawHorseInStable(uint256,uint256)": FunctionFragment;
    "withdrawStable(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimHorse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositHorseInStable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "facility", values?: undefined): string;
  encodeFunctionData(functionFragment: "horse", values?: undefined): string;
  encodeFunctionData(functionFragment: "horseId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "speed", values?: undefined): string;
  encodeFunctionData(functionFragment: "stableId", values?: undefined): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawHorseInStable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStable",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claimHorse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimSpeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositHorseInStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facility", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "horse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "horseId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "speed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stableId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawHorseInStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStable",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Test extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestInterface;

  functions: {
    claimHorse(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSpeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimStable(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositHorseInStable(
      _stableTokenId: BigNumberish,
      _horseTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositStable(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facility(overrides?: CallOverrides): Promise<[string]>;

    horse(overrides?: CallOverrides): Promise<[string]>;

    horseId(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakeContract(
      _stake: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetAmount(
      _targetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    speed(overrides?: CallOverrides): Promise<[string]>;

    stableId(overrides?: CallOverrides): Promise<[BigNumber]>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    targetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawHorseInStable(
      _stableTokenId: BigNumberish,
      _horseTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStable(
      _stableTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimHorse(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSpeed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimStable(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositHorseInStable(
    _stableTokenId: BigNumberish,
    _horseTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositStable(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facility(overrides?: CallOverrides): Promise<string>;

  horse(overrides?: CallOverrides): Promise<string>;

  horseId(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakeContract(
    _stake: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetAmount(
    _targetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  speed(overrides?: CallOverrides): Promise<string>;

  stableId(overrides?: CallOverrides): Promise<BigNumber>;

  staking(overrides?: CallOverrides): Promise<string>;

  targetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawHorseInStable(
    _stableTokenId: BigNumberish,
    _horseTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStable(
    _stableTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimHorse(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSpeed(overrides?: CallOverrides): Promise<void>;

    claimStable(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositHorseInStable(
      _stableTokenId: BigNumberish,
      _horseTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositStable(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    facility(overrides?: CallOverrides): Promise<string>;

    horse(overrides?: CallOverrides): Promise<string>;

    horseId(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setStakeContract(_stake: string, overrides?: CallOverrides): Promise<void>;

    setTargetAmount(
      _targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    speed(overrides?: CallOverrides): Promise<string>;

    stableId(overrides?: CallOverrides): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<string>;

    targetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawHorseInStable(
      _stableTokenId: BigNumberish,
      _horseTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStable(
      _stableTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    claimHorse(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSpeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimStable(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositHorseInStable(
      _stableTokenId: BigNumberish,
      _horseTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositStable(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facility(overrides?: CallOverrides): Promise<BigNumber>;

    horse(overrides?: CallOverrides): Promise<BigNumber>;

    horseId(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakeContract(
      _stake: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetAmount(
      _targetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    speed(overrides?: CallOverrides): Promise<BigNumber>;

    stableId(overrides?: CallOverrides): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    targetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawHorseInStable(
      _stableTokenId: BigNumberish,
      _horseTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStable(
      _stableTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimHorse(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSpeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimStable(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositHorseInStable(
      _stableTokenId: BigNumberish,
      _horseTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositStable(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    horse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    horseId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakeContract(
      _stake: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetAmount(
      _targetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    speed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawHorseInStable(
      _stableTokenId: BigNumberish,
      _horseTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStable(
      _stableTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
